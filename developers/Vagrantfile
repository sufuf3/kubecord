# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|
  unless Vagrant.has_plugin?("vagrant-scp")
    raise 'Plugin vagrant-reload is not installed! Please exec "vagrant plugin install vagrant-scp"'
  end
  config.vm.box = "ubuntu/xenial64"
  config.vm.hostname = 'kubecord-dev'
  config.vm.define vm_name = 'kubecord'

  development_env = ENV.fetch('DEV', true)
  ovs_env = ENV.fetch('OVS', true)
  onos_env = ENV.fetch('ONOS', true)

$kubecord_env = <<SHELL
set -e -x -u
echo "=== Setup Environment ==="
sudo apt-get update
sudo apt-get install -y git build-essential nfs-common ntp jq httpie vim cmake tcpdump unzip tig socat

# YouCompleteMe requirement
sudo apt-get -qq install -y python-dev python3-dev python python-pip htop

# Install Docker
# kubernetes official max validated version: 17.03.2~ce-0~ubuntu-xenial
export DOCKER_VERSION="17.06.2~ce-0~ubuntu"
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
sudo apt-get update
sudo apt-get install -y docker-ce=${DOCKER_VERSION}
# Manage Docker as a non-root user
sudo usermod -aG docker $USER

# Install Kubernetes
export KUBE_VERSION="1.11.0"
export NET_IF_NAME="enp0s8"
sudo apt-get install -y apt-transport-https curl
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
echo "deb http://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee --append /etc/apt/sources.list.d/kubernetes.list
sudo apt-get update
sudo apt-get install -y kubectl kubelet=${KUBE_VERSION}-00 kubeadm=${KUBE_VERSION}-00

# Disable swap
sudo swapoff -a && sudo sysctl -w vm.swappiness=0
sudo sed '/swap.img/d' -i /etc/fstab
sudo kubeadm init --kubernetes-version v${KUBE_VERSION} --apiserver-advertise-address=172.17.8.100 --pod-network-cidr=10.244.0.0/16
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

# Should give flannel the real network interface name
wget --quiet https://raw.githubusercontent.com/coreos/flannel/v0.9.1/Documentation/kube-flannel.yml -O /tmp/kube-flannel.yml
sed -i -- 's/"--kube-subnet-mgr"/"--kube-subnet-mgr", "--iface='"$NET_IF_NAME"'"/g' /tmp/kube-flannel.yml
kubectl apply -f /tmp/kube-flannel.yml

kubectl taint nodes --all node-role.kubernetes.io/master-

# Install Golang
wget --quiet https://storage.googleapis.com/golang/go1.10.2.linux-amd64.tar.gz
sudo tar -zxf go1.10.2.linux-amd64.tar.gz -C /usr/local/
echo 'export GOROOT=/usr/local/go' >>  /home/$USER/.bashrc
echo 'export GOPATH=$HOME/go' >> /home/$USER/.bashrc
echo 'export PATH=/home/$USER/protoc/bin:$PATH:$GOROOT/bin:$GOPATH/bin' >> /home/$USER/.bashrc
export GOROOT=/usr/local/go
export GOPATH=$HOME/go
export PATH=/home/$USER/protoc/bin:$PATH:$GOROOT/bin:$GOPATH/bin

# setup golang dir
mkdir -p /home/$USER/go/src
rm -rf /home/$USER/go1.10.2.linux-amd64.tar.gz
sudo add-apt-repository ppa:duggan/bats --yes
sudo apt-get update -qq
sudo apt-get install -qq bats

# Install protoc
# Env for proto
PROTOC_RELEASE="https://github.com/google/protobuf/releases/download/v3.5.1/protoc-3.5.1-linux-x86_64.zip"
PROTOC_TARGET="${HOME}/protoc"
if [ ! -d "${PROTOC_TARGET}" ]; then curl -fsSL "$PROTOC_RELEASE" > "${PROTOC_TARGET}.zip"; fi
if [ -f "${PROTOC_TARGET}.zip" ]; then unzip "${PROTOC_TARGET}.zip" -d "${PROTOC_TARGET}"; fi
go get -u github.com/golang/protobuf/{proto,protoc-gen-go}
rm -rf /home/$USER/protoc.zip

# Install helm
curl -L https://storage.googleapis.com/kubernetes-helm/helm-v2.9.1-linux-amd64.tar.gz > helm-v2.9.1-linux-amd64.tar.gz && tar -zxvf helm-v2.9.1-linux-amd64.tar.gz && chmod +x linux-amd64/helm && sudo mv linux-amd64/helm /usr/local/bin/helm
rm -rf /home/$USER/helm-v2.9.1-linux-amd64.tar.gz
sudo pip install yq

# Install govendor package manager
go get -u github.com/kardianos/govendor

# Get the project
mkdir -p /home/$USER/go/src/linkernetworks
cd /home/$USER/go/src/linkernetworks & git clone https://github.com/linkernetworks/network-controller.git
SHELL

$apt_openvswitch = <<SHELL
set -e -x -u
sudo apt-get update && sudo apt-get install -y openvswitch-switch
SHELL

$setup_onos = <<SHELL
set -e -x -u
cd ~/ && git clone https://github.com/opencord/helm-charts.git
cd ~/helm-charts/ && git checkout 6.0.0
cd ~/helm-charts/ && helm init
cd ~/helm-charts/ && kubectl create serviceaccount --namespace kube-system tiller
cd ~/helm-charts/ && kubectl create clusterrolebinding tiller-cluster-rule --clusterrole=cluster-admin --serviceaccount=kube-system:tiller
cd ~/helm-charts/ && kubectl patch deploy --namespace kube-system tiller-deploy -p '{"spec":{"template":{"spec":{"serviceAccount":"tiller"}}}}'
#helm init --service-account tiller --upgrade
#cd ~/helm-charts/ && helm repo update
#cd ~/network-controller && kubectl create -f deploy/server/
SHELL

  # In order to simulate multiple interfaces
  # enp0s8
  config.vm.network :private_network, ip: "172.17.8.100"
  # enp0s9
  config.vm.network :private_network, ip: "172.17.8.50"
  # enp0s10
  config.vm.network :private_network, ip: "172.17.8.60"
  # enp0s16
  config.vm.network :private_network, ip: "172.17.8.70"
  # enp0s17
  config.vm.network :private_network, ip: "172.17.8.80"
  # enp0s18
  config.vm.network :private_network, ip: "172.17.8.90"

  if ovs_env == true
     config.vm.provision "shell", privileged: false, inline: $apt_openvswitch
  end
 
  if development_env == true
    config.vm.provision "shell", privileged: false, inline: $kubecord_env
  end 

  if onos_env == true
    config.vm.provision "shell", privileged: false, inline: $setup_onos
  end

  config.vm.provider :virtualbox do |v|
      v.customize ["modifyvm", :id, "--cpus", 2]
      v.customize ["modifyvm", :id, "--memory", 5120]
      v.customize ['modifyvm', :id, '--nicpromisc1', 'allow-all']
      v.gui = true
  end
end
